{1,
{19,
{"Шаблоны разработчика",1,0,"",""},
{15,
{"Готовый код",1,0,"",""},
{0,
{"Найти строки",0,0,"Най[тиСтрок]и","СтруктураОтбора = Новый Структура;
СтруктураОтбора.Вставить(""<?>"", );

НайденныеСтроки = .НайтиСтроки(СтруктураОтбора);
Если НайденныеСтроки.Количество() > 0 Тогда
	
КонецЕсли; 
"}
},
{0,
{"Текущие данные",0,0,"Тек[ущиеДанны]е","ТекущиеДанные = ЭлементыФормы.<?>.ТекущиеДанные;
Если ТекущиеДанные = Неопределено Тогда
	Возврат;
КонецЕсли; "}
},
{0,
{"Набор записей записать",0,0,"Наб[орЗаписеЗаписат]ь","НаборЗаписей = <?>*.*.СоздатьНаборЗаписей();

// структура отбора записей регистра
//НаборЗаписей.Отбор[""Регистратор""].Установить(<?>, Истина);
НаборЗаписей.Отбор[""*""].Установить(*, Истина);

НаборЗаписей.Прочитать();

Если НаборЗаписей.Количество() > 0 Тогда
	НаборЗаписей.Очистить();
КонецЕсли;

НоваяЗапись = НаборЗаписей.Добавить();

// СЛУЖЕБНЫЕ:
НоваяЗапись.Активность = Истина;		

// ИЗМЕРЕНИЯ:
НоваяЗапись.* = ;

// РЕСУРСЫ:
//НоваяЗапись. = ;

// РЕКВИЗИТЫ:
//НоваяЗапись. = ;

Попытка						
	НаборЗаписей.Записать(Истина); // запись: замещать существующие записи			
Исключение
	//Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;
"}
},
{0,
{"Оформления строк",0,0,"Офо[рмленияСтро]к","Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
	ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
	<?>
	
КонецЦикла;
"}
},
{0,
{"Скопировать строки таблицы по отбору",0,0,"Ско[пироват]ь","<?""Имя таблицы"">.Скопировать(<?""Имя таблицы"">.НайтиСтроки(Новый Структура(<?>""ИмяПараметраОтбора"", ""ЗначениеПараметраОтбора"")), ""КопируемыеКолонки"")"}
},
{0,
{"Таблица значений ( структура )",0,0,"Таб[лицаЗначени]й","<?""Имя таблицы""> = Новый ТаблицаЗначений;
<?""Имя таблицы"">.Колонки.Добавить(""<Имя>""<?>, ""<Тип>"", ""<Заголовок>"", ""<Ширина>"");
//<?""Имя таблицы"">.Индексы.Добавить(""<ИменаКолонок>"");	
"}
},
{0,
{"Отказ = Истина",0,0,"От[ка]з","Отказ = Истина;<?>"}
},
{3,
{"Условия",1,0,"",""},
{0,
{"Если Не Отказ Тогда",0,0,"Е[сл]и","Если Не Отказ Тогда
	<?>
КонецЕсли;
"}
},
{0,
{"Если ТипЗнч ... Тогда",0,0,"Е[сл]и","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда

	<?>

КонецЕсли;"}
},
{0,
{"Если Не ЗначениеЗаполнено ... Тогда",0,0,"Е[сл]и","Если Не ЗначениеЗаполнено(<?>) Тогда
	
КонецЕсли;"}
}
},
{2,
{"Информативность",1,0,"",""},
{0,
{"Обработано данных (счетчик)",0,0,"Обр[абота]н","Количество	= <?>.Количество();
НомерПП		= 0;

НомерПП = НомерПП + 1;	
Состояние(НСтр(""ru = 'Обработано ""+НомерПП+"" из ""+Количество+""'""));
"}
},
{0,
{"Замер скорости выполнения кода",0,0,"_Зам[ерСкорост]и","//// { ЗАМЕР ВРЕМЕНИ ВЫПОЛНЕНИЯ КОДА
__СкриптКонтрол = Новый COMОбъект(""MSScriptControl.ScriptControl"");
__СкриптКонтрол.Language = ""javascript"";

ЗамерВремениНачало = __СкриптКонтрол.eval(""new Date().getTime()"");
//// } ЗАМЕР ВРЕМЕНИ ВЫПОЛНЕНИЯ КОДА

<?>

//// { ЗАМЕР ВРЕМЕНИ ВЫПОЛНЕНИЯ КОДА
ЗамерВремениОкончание = __СкриптКонтрол.eval(""new Date().getTime()"");	

Миллисекунды		= ЗамерВремениОкончание-ЗамерВремениНачало;
// Часы
КолВоЧасов			= Цел(Миллисекунды/(60*60*1000));
Остаток				= Миллисекунды-КолВоЧасов*60*60*1000;	
// Минуты
КолВоМинут			= Цел(Остаток/(60*1000));
Остаток				= Остаток-КолВоМинут*60*1000;	
// Секунды,миллисекунды
КолВоСекунд			= Цел(Остаток/1000);
КолВоМиллисекунд	= Остаток-КолВоСекунд*1000;
	
Сообщить(НСтр(""ru = 'Время выполнения: "" + Формат(КолВоЧасов,""ЧЦ=3;ЧН=;ЧВН="")+"":""+Формат(КолВоМинут,""ЧЦ=2;ЧН=;ЧВН="")+"":""+Формат(КолВоСекунд,""ЧЦ=2;ЧН=;ЧВН="")+"":""+Формат(КолВоМиллисекунд,""ЧЦ=3;ЧН=;ЧВН="") + "" мс.'""), СтатусСообщения.Информация);
//// } ЗАМЕР ВРЕМЕНИ ВЫПОЛНЕНИЯ КОДА"}
}
},
{5,
{"СКД",1,0,"",""},
{0,
{"Вывести результат отчета на СКД в табличное поле",0,0,"СКД","<?""Поле табличного документа"">.Очистить();
                     
ОтчетОбъект = Отчеты.<?""Отчет"", Отчет>.Создать();

СКД = ОтчетОбъект.СхемаКомпоновкиДанных;
Настройки = СКД.НастройкиПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// Настройки отчета
<?>
// Параметры

// Отборы

КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКД = КомпоновщикМакетаКД.Выполнить(СКД, Настройки);

ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
ПроцессорКД.Инициализировать(МакетКД);

ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(<?""Поле табличного документа"">);
ПроцессорВывода.Вывести(ПроцессорКД);"}
},
{0,
{"Вывести результат формирования СКД в таблицу значений",0,0,"СКД","Настройки = КомпоновщикНастроек.ПолучитьНастройки();

КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , ,Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));
				
ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);	

ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
ПроцессорВывода.УстановитьОбъект(Результат);

ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
"}
},
{0,
{"Алгоритм программного формирования отчета СКД",0,0,"СКД","Результат.Очистить();
	
Настройки = КомпоновщикНастроек.ПолучитьНастройки();

ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,,, Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));

ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(Результат);

// 1. Вариант упрошенный
//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

// 2. Вариант детальный
ПроцессорВывода.НачатьВывод();

//ТаблицаЗафиксирована = Ложь;
Пока Истина Цикл
	
	ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
	
	Если ЭлементРезультата = Неопределено Тогда
		Прервать;
	Иначе
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		// Фиксация шапки
		//Если Не ТаблицаЗафиксирована И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 Тогда
		//	ТаблицаЗафиксирована = Истина;
		//	Результат.ФиксацияСверху = Результат.ВысотаТаблицы - 1;
		//КонецЕсли;
	КонецЕсли;
КонецЦикла;

ПроцессорВывода.ЗакончитьВывод();"}
},
{0,
{"Получить СКД из макета и инициализировать настройки КД",0,0,"СКД","СКД = ПолучитьМакет(""<ИмяМакета>"");

КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
"}
},
{0,
{"Индикатор в строке состояния на СКД",0,0,"СКД","ПроцессорКомпоновки = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорКомпоновки.ОтображатьПроцентВывода = Истина;

ЭлементКомпоновки = Новый ЭлементРезультатаКомпоновкиДанных;

ПроцессорКомпоновки.НачатьВывод();

Для Сч = 1 По 100 Цикл
   ЭлементКомпоновки.ПроцентВывода = Сч;
   ПроцессорКомпоновки.ВывестиЭлемент(ЭлементКомпоновки);
КонецЦикла;

ПроцессорКомпоновки.ЗакончитьВывод();"}
}
},
{9,
{"Работа с файлами",1,0,"",""},
{2,
{"Текстовый файл",1,0,"",""},
{0,
{"Запись в текстовый файл",0,0,"Тек[стовыйЗапис]ь","ТекстовыйФайл = Новый ТекстовыйДокумент;
ТекстовыйФайл.УстановитьТекст(""<?><Текст>"");
Попытка
	ТекстовыйФайл.Записать(""<ИмяФайла>"", КодировкаТекста.UTF8);	
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;
"}
},
{0,
{"Чтение из текстового файлa",0,0,"Тек[стовыйЧтени]е","ТекстовыйФайл = Новый ТекстовыйДокумент;
Попытка	
	ТекстовыйФайл.Прочитать(""<?><ИмяФайла>"", КодировкаТекста.UTF8);
	
	Для НомерСтроки = 1 По ТекстовыйФайл.КоличествоСтрок() Цикл 		
		СтрокаФайла = ТекстовыйФайл.ПолучитьСтроку(НомерСтроки); 			
	КонецЦикла;
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;
	"}
}
},
{2,
{"Сериализация",1,0,"",""},
{0,
{"Сериализация значения",0,0,"Сер[иализаци]я","ДокументЗаписи = Новый ТекстовыйДокумент;
Попытка	
	ДокументЗаписи.УстановитьТекст(ЗначениеВСтрокуВнутр(<?""Укажите имя объекта"">));
	ДокументЗаписи.Записать(""<?><ПолноеИмяФайла>"", КодировкаТекста.UTF8);
Исключение
	//Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
},
{0,
{"Десериализовать значение",0,0,"Дес[ериализоват]ь","ДокументЗаписи = Новый ТекстовыйДокумент;
Попытка	
	ДокументЗаписи.Прочитать(""<?><ПолноеИмяФайла>"", КодировкаТекста.UTF8);
	<?""Укажите имя объекта""> = ЗначениеИзСтрокиВнутр(ДокументЗаписи.ПолучитьТекст());
Исключение
	//Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
}
},
{2,
{"XML",1,0,"",""},
{0,
{"Запись ХМL",0,0,"Зап[исьХМ]L","ЗаписьХМL = Новый ЗаписьXML;
ЗаписьХМL.Отступ = Истина;

ЗаписьХМL.ОткрытьФайл(<?>""<ПутьКФайлу>"");
//ЗаписьXML.УстановитьСтроку(""<СтрокаXML>"");

ЗаписьХМL.ЗаписатьОбъявлениеXML();		

ЗаписьХМL.ЗаписатьНачалоЭлемента(""<КорневойЭлемент>"");		
ЗаписьХМL.ЗаписатьАтрибут(""<ИмяАтрибута>"", Строка(""""));

ЗаписьХМL.ЗаписатьНачалоЭлемента(""<ВложенныйЭлемент>"");
ЗаписьХМL.ЗаписатьАтрибут(""<ИмяАтрибута>"", Строка(""""));
ЗаписьХМL.ЗаписатьКонецЭлемента();

ЗаписьХМL.ЗаписатьКонецЭлемента(); // <КорневойЭлемент>

Попытка
	СтрокаXML = ЗаписьХМL.Закрыть();		
Исключение
	//Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;
"}
},
{0,
{"Чтение XML",0,0,"Чте[ниеXM]L","ЧтениеXML = Новый ЧтениеXML;
ЧтениеXML.ОткрытьФайл(""<?><ПутьКФайлу>"");
	
// <?xml version=""1.0"" encoding=""UTF-8""?>
Если Не ЧтениеXML.Прочитать() Тогда
	ВызватьИсключение НСтр(""ru = 'Не верный формат файла!'"");
КонецЕсли; 

Пока ЧтениеXML.Прочитать() Цикл 

	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
		
		Сообщить(НСтр(""ru = '""+ЧтениеXML.Имя+"" {'""), СтатусСообщения.Информация);

		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 

			// Прочитать данные узла атрибута. 
			ТипУзла		= ЧтениеXML.ТипУзла;
			Имя			= ЧтениеXML.Имя;
			Значение	= ЧтениеXML.Значение;
			
			Сообщить(НСтр(""ru = '   Атрибут: ""+Имя+"": ""+Значение+""'""), СтатусСообщения.Информация);
 
		КонецЦикла;

	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда 

		Сообщить(НСтр(""ru = '   Текст: ""+ЧтениеXML.Значение+""'""), СтатусСообщения.Информация);

	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 

		Сообщить(НСтр(""ru = ' }'""), СтатусСообщения.Информация);

	КонецЕсли; 

КонецЦикла;
"}
}
},
{2,
{"DBF",1,0,"",""},
{0,
{"Запись файла XBase",0,0,"Зап[исьXBas]e","Попытка
	Файл = Новый XBase; 
	//Файл.Поля.Добавить(""CODE"", ""S"", 5); 
	Файл.СоздатьФайл(""<ПутьКБазе>"", ""<ПутьКИндексу>""); 	
	// Индекс поля
	//Файл.Индексы.Добавить(""IDXCODE"", ""CODE""); 
	//ФайлИндекса = Файл.СоздатьИндексныйФайл(""<ПутьКИндексу>""); 
	Файл.АвтоСохранение = Истина; 

	//Новая запись
	Файл.Добавить(); 
	//Файл.CODE = """"; 

	Файл.ЗакрытьФайл();
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
},
{0,
{"Чтение файла XBase",0,0,"Чте[ниеXBas]e","Попытка
	Файл = Новый XBase;
	Файл.ОткрытьФайл(""<ПутьКБазе>"", ""<ПутьКИндексу>"");
	// Индекс поля
	//Файл.ТекущийИндекс = Файл.Индексы.IDXCODE;

	Пока Файл.Следующая() Цикл
		//Сообщить(Файл.CODE);
	КонецЦикла;

	Файл.ЗакрытьФайл();
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;
"}
}
},
{2,
{"ZIP",1,0,"",""},
{0,
{"Запись Zip файла",0,0,"Зап[исьZipФайл]а","ФайлАрхива = Новый ЗаписьZipФайла(""<ИмяФайла>"", ""<Пароль>"", ""<Комментарий>"", МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный, ""<МетодШифрования>""); 
ФайлАрхива.Добавить(""<ПутьКФайлам\*.*>"", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
Попытка
	ФайлАрхива.Записать();
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
},
{0,
{"Чтение ZIP файла",0,0,"Чте[ниеZIPФайл]а","ФайлАрхива = Новый ЧтениеZIPФайла(""<ИмяФайла>"", ""<Пароль>""); 
Попытка
	ФайлАрхива.ИзвлечьВсе(""<ПутьИзвлечения>"", РежимВосстановленияПутейФайловZIP.Восстанавливать); 
	ФайлАрхива.Закрыть();	
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
}
},
{1,
{"XLS",1,0,"",""},
{0,
{"Чтение XLS файла",0,0,"эк[сель]","Если ПустаяСтрока(<?""ПутьКФайлу"">) Тогда
	Предупреждение(НСтр(""ru = 'Не указан обрабатываемый файл Microsoft Excel.'""), 30);
	Возврат;
КонецЕсли;

Попытка	 	
		
	Попытка	 	
		Состояние(НСтр(""ru = 'Загрузка Microsoft Excel ...'""));
		ExcelПриложение = Новый COMОбъект(""Excel.Application""); // Загрузка Microsoft Excel
		//ExcelПриложение.DisplayAlerts = Ложь;
	Исключение
		ВызватьИсключение ""Ошибка при загрузке приложения Microsoft Excel"";
	КонецПопытки;
	
	Попытка				
		Состояние(НСтр(""ru = 'Открытие файла Microsoft Excel ...'""));
		ExcelФайл = ExcelПриложение.WorkBooks.Open(<?""ПутьКФайлу"">); // Открытие файла Microsoft Excel
	Исключение
		ВызватьИсключение ""Ошибка открытия файла Microsoft Excel"";
	КонецПопытки;
	
	Попытка
		Состояние(НСтр(""ru = 'Обработка файла Microsoft Excel ...'""));
		ExcelЛист = ExcelФайл.Sheets(<?""НомерЛистаЕксель"">);
		
		xlCellTypeLastCell = 11;
		ExcelПоследняяСтрока = ExcelЛист.Cells.SpecialCells(xlCellTypeLastCell).Row;
		ExcelПоследняяКолонка = ExcelЛист.Cells.SpecialCells(xlCellTypeLastCell).Column;			
	Исключение
		ВызватьИсключение ""Ошибка открытия листа № <?""НомерЛистаЕксель""> Microsoft Excel."";
	КонецПопытки;
	
	// Последовательное чтение строк с выбранного листа
	Для Строка = 1 По ExcelПоследняяСтрока Цикл
		
		Состояние(""Обработка файла Microsoft Excel строка:  "" + Строка + "" из "" + ExcelПоследняяСтрока);
		
		Для Колонка = 1 По ExcelПоследняяКолонка Цикл
		
			ОбработкаПрерыванияПользователя();

			Попытка
				//ЗначениеЯцейки = ExcelЛист.Cells(Строка, Колонка).Value;
			Исключение				
				Сообщить(НСтр(""ru = 'Ошибка чтения строки файла Microsoft Excel."" + Строка + Символы.ПС + ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
				Продолжить;
			КонецПопытки;						
						
		КонецЦикла;
				
	КонецЦикла;
	
	Состояние(НСтр(""ru = ''""));
	
	ExcelПриложение.Quit(); // Закрыть COM соединение
	ExcelПриложение = Неопределено;
 
Исключение		
	
	Состояние(НСтр(""ru = ''""));
	
	ExcelПриложение.Quit(); // Закрыть COM соединение
	ExcelПриложение = Неопределено;		
	
	Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
	
КонецПопытки;"}
}
},
{0,
{"Диалог выбора файла/каталога",0,0,"Ди[ало]г","<?""Имя переменной""> = Новый ДиалогВыбораФайла(<?"""", ВыборВарианта, ""Открытие"", ""РежимДиалогаВыбораФайла.Открытие"", ""Сохранение"", ""РежимДиалогаВыбораФайла.Сохранение"", ""Выбор каталога"", ""РежимДиалогаВыбораФайла.ВыборКаталога"">);
<?""Имя переменной"">.ПолноеИмяФайла = """";
//<?""Имя переменной"">.Фильтр = ""Файлы (*.txt,*.*)|*.txt;*.*"";
//<?""Имя переменной"">.МножественныйВыбор = Ложь;
//<?""Имя переменной"">.Заголовок = ""Выберите файл"";

ОписаниеОповещенияДиалога = Новый ОписаниеОповещения(""ОписаниеОповещенияДиалога"", ЭтаФорма);
	
<?""Имя переменной"">.Показать(ОписаниеОповещенияДиалога);

&НаКлиенте
Процедура ОписаниеОповещенияДиалога(МассивВыбранных, Доп) Экспорт 
	
	Если НЕ МассивВыбранных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Объект.ПутьКПроекту = МассивВыбранных.Получить(0);
		
	
КонецПроцедуры // ОписаниеОповещенияДиалога()
"}
},
{0,
{"Файл существует",0,0,"Фай[лСуществуе]т","<?""Имя переменной""> = Новый Файл(<?>""<Путь>"");
Если <?""Имя переменной"">.Существует() Тогда
	
КонецЕсли; 
"}
},
{0,
{"Найти файлы",0,0,"Най[тиФайл]ы","НайденныеФайлы  = НайтиФайлы(<?>""<Путь>"", ""<Маска>"");
Если НайденныеФайлы.Количество() > 0 Тогда
	
КонецЕсли; "}
}
},
{5,
{"Работа с формами",1,0,"",""},
{0,
{"Открыть форму Оповещение и параметры",0,1,"Отк[рытьФорм]у","ПараметрыОткрываемойФормы = Новый Структура;
ПараметрыОткрываемойФормы.Вставить(""<?>"", );

ОписаниеОповещения<?""Введите имя оповещения""> = Новый ОписаниеОповещения(""ОписаниеОповещения<?""Введите имя оповещения"">"",ЭтотОбъект);

ОткрытьФорму("""", ПараметрыОткрываемойФормы,,,,,ОписаниеОповещения<?""Введите имя оповещения"">);

&НаКлиенте
Процедура ОписаниеОповещения<?""Введите имя оповещения"">(Значение, Доп) Экспорт 

	

КонецПроцедуры // ОписаниеОповещения<?""Введите имя оповещения"">

"}
},
{0,
{"Открыть форму",0,0,"Отк[рытьФорм]у","<?""Введите имя формы""> = ПолучитьФорму(<?>""<Форма>"", ""<Владелец>"", ""<Ключ уникальности>"");
Если <?""Введите имя формы"">.Открыта() Тогда
	<?""Введите имя формы"">.Активизировать();
Иначе
	<?""Введите имя формы"">.Открыть();		
КонецЕсли; 
"}
},
{0,
{"Открыть форму с параметрами",0,0,"Отк[рытьФорм]у","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );

<?""Введите имя формы""> = ПолучитьФорму("""", ПараметрыФормы);

Если <?""Введите имя формы"">.Открыта() Тогда
	<?""Введите имя формы"">.Активизировать();
Иначе
	<?""Введите имя формы"">.Открыть();		
КонецЕсли; 
"}
},
{0,
{"Описание оповещения",0,1,"Опи[сание оповещения]","
ОписаниеОповещения<?""Введите имя оповещения""> = Новый ОписаниеОповещения(""ОповещениеОбработчик<?""Введите имя оповещения"">"", ЭтотОбъект);

&НаКлиенте
Процедура ОповещениеОбработчик<?""Введите имя оповещения"">(Значение, Доп) Экспорт 

	Если Значение=Неопределено Тогда
		Возврат;
	КонецЕсли;

	<?>

КонецПроцедуры // ОповещениеОбработчик<?""Введите имя оповещения"">()
"}
},
{0,
{"Показать выбор из списка",0,0,"Пок[азатьВыборИзСписк]а","СписокДляВыбора = Новый СписокЗначений;

ОписаниеОповещения<?""Введите имя оповещения""> = Новый ОписаниеОповещения(""ОписаниеОповещения<?""Введите имя оповещения"">"", ЭтаФорма);
	
ПоказатьВыборИзСписка(ОписаниеОповещения<?""Введите имя оповещения"">, СписокДляВыбора, , СписокДляВыбора.Получить(0))
	

&НаКлиенте
Процедура ОписаниеОповещения<?""Введите имя оповещения"">(Значение, Доп) Экспорт 
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	
КонецПроцедуры // ОписаниеОтветаНаВопросГиперссылки()
"}
}
},
{2,
{"Отбор",1,0,"",""},
{0,
{"Установить отбор (упрощенный)",0,0,"Отб[о]р","<?""Имя списка"">.Отбор[""<?""Элемент отбора"">""].Установить(<?>, <?""Использование"", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">);"}
},
{0,
{"Установить отбор",0,0,"Отб[о]р","<?""Имя списка"">.Отбор[""<?""Элемент отбора"">""].Использование = <?""Использование"", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">;
<?""Имя списка"">.Отбор[""<?""Элемент отбора"">""].ВидСравнения = ВидСравнения.<?""Вид сравнения"", ВыборВарианта, ""Равно ( = )"", ""Равно"", ""Не равно ( <> )"", ""НеРавно"", ""Содержит"", ""Содержит"", ""Не содержит"", ""НеСодержит"", ""Больше ( > )"", ""Больше"", ""Больше или равно ( >= )"", ""БольшеИлиРавно"", ""Меньше ( < )"", ""Меньше"", ""Меньше или равно ( <= )"", ""МеньшеИлиРавно"", ""В иерархии"", ""ВИерархии"", ""В списке"", ""ВСписке"", ""В списке по иерархии"", ""ВСпискеПоИерархии"", ""Интервал ( > и < )"", ""Интервал"", ""Интервал включая границы ( >= и <= )"", ""ИнтервалВключаяГраницы"", ""Интервал включая начало ( >= и < )"", ""ИнтервалВключаяНачало"", ""Интервал включая окончание ( > и <= )"", ""ИнтервалВключаяОкончание"", ""Не в иерархии"", ""НеВИерархии"", ""Не в списке"", ""НеВСписке"", ""Не в списке по иерархии"", ""НеВСпискеПоИерархии"">;
<?""Имя списка"">.Отбор[""<?""Элемент отбора"">""].Значение = <?>;
//ЭлементыФормы.<""Имя элемента управления"">.НастройкаОтбора[""<?""Элемент отбора"">""].Доступность = Ложь;"}
}
},
{2,
{"Внешние обработки и отчеты",1,0,"",""},
{0,
{"Создание внешней обработки",0,0,"Вн[ешниеОбработк]и","ВнешняяОбработка = ВнешниеОбработки.Создать(""<ПолноеИмяФайла>"");"}
},
{0,
{"Создание внешнего отчета",0,0,"Вн[ешниеОтчет]ы","ВнешнийОтчет = ВнешниеОтчеты.Создать(""<ПолноеИмяФайла>"");"}
}
},
{5,
{"Универсальные функции",1,0,"",""},
{0,
{"Идентификатор по строке",0,0,"Иде[нтификато]р","// Формирование идентификатора по правилам образования имен переменных 1С по входящей строке
// Пример ""Статья возмещение НДС"" => ""СтатьяВозмещениеНДС""
//
//Параметры:
// стр - Строка - от которой необходимо получить идентификатор
//
//Возвращаемое значение: 
// Строка
//
Функция ИдентификаторПоСтроке(ЗНАЧ стр)
    ДопустимыеСимволы = ""ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁQWERTYUIOPASDFGHJKLZXCVBNM"" + 
    ""йцукенгшщзхъфывапролджэячсмитьбюёqwertyuiopasdfghjklzxcvbnm_ "";
    
    Пока Найти(стр, ""  "") > 0 Цикл
        стр = СтрЗаменить(стр, ""  "", "" "");            
    КонецЦикла; 
    
    ДлинаСтроки = СтрДлина(стр);
    СледующаяЗаглавная = Истина;
    Слово = """";
    Для сч=1 По ДлинаСтроки Цикл
        
        сим = Сред(стр, сч, 1);
        
        Если сч = 1 И сим = ""_"" Тогда
            Продолжить;            
        КонецЕсли; 
        
        Если Найти(ДопустимыеСимволы, сим) = 0 Тогда
            Продолжить;            
        КонецЕсли; 
        Если сим = "" "" Тогда
            СледующаяЗаглавная = Истина;
            Продолжить;
        КонецЕсли; 
        
        Если СледующаяЗаглавная Тогда
            СледующаяЗаглавная = Ложь;
            Сим = Врег(Сим);            
        КонецЕсли; 
        
        Слово = Слово + Сим;                
    КонецЦикла; 
        
    Возврат Слово;
КонецФункции"}
},
{0,
{"Объединить шапку табличного документа",0,0,"Объ[единитьШапк]у","// Объединяет ячейки шапки табличного документа с повторяющимся текстом
// Служит для решения задачи отображения группировок колонок в табличных документах, полученных с помощью СКД
//
//Параметры:
// ТабДок - ТабличныйДокумент
// ВысотаШапки - Число, если не передана, высотой шапки считается высота фиксации таблицы
//
Процедура СвернутьЗаголовкиШапкиТабличногоДокумента(ТабДок, ВысотаШапки = 0)

    ВысотаШапки = ?(ВысотаШапки = 0, ТабДок.ФиксацияСверху, ВысотаШапки);        
    НачалоШапки = ?(ТабДок.ФиксацияСлева = 0, 1, ТабДок.ФиксацияСлева);
    
    Для СчетчикСтрок=1 По ВысотаШапки Цикл
        
        НомерПервойКолонкиОбъединения = 0;
        Для СчетчикКолонок=НачалоШапки По ТабДок.ШиринаТаблицы Цикл            

            ОбъединятьЯчейки = Ложь;
            Ячейка = ТабДок.Область(СчетчикСтрок, СчетчикКолонок);
            Если ПустаяСтрока(Ячейка.Текст) Тогда
                Продолжить;                
            КонецЕсли; 
            ЯчейкаСлед = ТабДок.Область(СчетчикСтрок, СчетчикКолонок+1);
            ОбъединятьЯчейки = Ячейка.Текст = ЯчейкаСлед.Текст;
            
            Если ОбъединятьЯчейки Тогда                
                НомерПервойКолонкиОбъединения = ?(НомерПервойКолонкиОбъединения = 0, СчетчикКолонок, НомерПервойКолонкиОбъединения);
                
            ИначеЕсли НомерПервойКолонкиОбъединения > 0 Тогда
                ТекстЗаголовка = ТабДок.Область(СчетчикСтрок, СчетчикКолонок).Текст;
                ОбъединяемаяОбласть = ТабДок.Область(СчетчикСтрок, НомерПервойКолонкиОбъединения, СчетчикСтрок, СчетчикКолонок);
                ОбъединяемаяОбласть.Объединить();
                
                КоличествоКолонокВОбъединении = СчетчикКолонок - НомерПервойКолонкиОбъединения;
                ОбъединяемаяОбласть.ШиринаКолонки = ОбъединяемаяОбласть.ШиринаКолонки / КоличествоКолонокВОбъединении;
                
                ОбъединяемаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
                ОбъединяемаяОбласть.Текст = ТекстЗаголовка;
                
                НомерПервойКолонкиОбъединения = 0;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЦикла;
    
КонецПроцедуры"}
},
{0,
{"Excel ADO",0,0,"эк[сель]"," ADODBConnection = Новый COMОбъект(""ADODB.Connection"");
    ADODBConnection.Provider = ""Microsoft.ACE.OLEDB.12.0"";
    ADODBConnection.Properties(""Data Source"").Value = СокрЛП(ЭтотОбъект.ПутьКФайлу);
    ADODBConnection.Properties(""Extended Properties"").Value = ""Excel 12.0;HDR=Yes;IMEX=1"";
    ADODBConnection.Open();

//  Получить список имен листов:
//    ADODBRecordset = Новый COMОбъект(""ADODB.Recordset"");
//    ADODBRecordset = ADODBConnection.OpenSchema(20);
//    СписокЛистов = Новый СписокЗначений;
//    Пока НЕ ADODBRecordset.EOF Цикл        
//        ИмяЛиста = ADODBRecordset.Fields(""TABLE_NAME"").Value;
//        Если Найти(ИмяЛиста, ""_xlnm#_FilterDatabase"") = 0 Тогда
//            СписокЛистов.Добавить(ИмяЛиста); 
//        КонецЕсли;                 
//        ADODBRecordset.MoveNext();
//    КонецЦикла;
//    ADODBRecordset.Close();

//    СписокЛистов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
//    ИмяЛиста = СписокЛистов[0].Значение;
    
    ТекстЗапроса = ""SELECT * FROM ["" + ЭтотОбъект.ИмяЛиста + ""$]"";
    
    ADODBRecordset = Новый COMОбъект(""ADODB.Recordset"");
    ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
    
    КолвоКолонокExcel = ADODBRecordset.Fields.Count;
    
    СчетчикСтрок = 1;    
    Пока ADODBRecordset.EOF() = 0 Цикл
		
        Для СчетчикКолонок = 1 ПО КолвоКолонокExcel Цикл
            
            Поле = ADODBRecordset.Fields.Item(СчетчикКолонок - 1);
                
            Если Поле.ActualSize = 0 Тогда// Пустое поле EXCEL.
                Продолжить;
            КонецЕсли;
                
            ЗначениеЯчейки = Поле.Value; 
   // Обработка значения ячейки 
 
        КонецЦикла;
        
        ADODBRecordset.MoveNext();   // Следующая строка.
        СчетчикСтрок = СчетчикСтрок + 1;
        
    КонецЦикла;

    ADODBConnection.Close();
    
    ADODBRecordset = Неопределено;
    ADODBConnection = Неопределено;"}
},
{0,
{"Быстрое описание типа",0,0,"","// Упрощенный конструктор описания типа
//
//Параметры:
// ИмяТипа - Строка, Массив элементов типа ""Тип"" - первый параметр конструктора ОписаниеТипов()
// п1 - Произвольный, первый параметр квалификатора 
// п2 - Произвольный, второй параметр квалификатора 
// п3 - Произвольный, третий параметр квалификатора 
//
//Возвращаемое значение: 
//    ОписаниеТипов
//
Функция ОписаниеТипа(ИмяТипа, п1 = Неопределено, п2 = Неопределено, п3 = Неопределено)
    
    Перем Результат;
    
    Если ИмяТипа = ""Строка"" Тогда
        
        п1 = ?(п1 = Неопределено, 0, п1);
        Если п2 = Неопределено Тогда
            п2 = ДопустимаяДлина.Переменная;            
        КонецЕсли; 
      
        КвалСтроки = Новый КвалификаторыСтроки(п1, п2);
        Результат = Новый ОписаниеТипов(ИмяТипа,,,,КвалСтроки);
        
    ИначеЕсли ИмяТипа = ""Число"" Тогда    
        
        п1 = ?(п1 = Неопределено, 0, п1);
        п2 = ?(п2 = Неопределено, 0, п2);
        Если п3 = Неопределено Тогда
            п3 = ДопустимыйЗнак.Любой;            
        КонецЕсли; 
        
        КвалЧисла = Новый КвалификаторыЧисла(п1, п2, п3);
        Результат = Новый ОписаниеТипов(ИмяТипа,,,КвалЧисла);
        
    ИначеЕсли ИмяТипа = ""Дата"" Тогда
        
        Если п1 = Неопределено Тогда
            п1 = ЧастиДаты.ДатаВремя;            
        КонецЕсли; 
        
        КвалДаты = Новый КвалификаторыДаты(п1);
        Результат = Новый ОписаниеТипов(ИмяТипа,,,,,КвалДаты);
        
    Иначе
        Результат = Новый ОписаниеТипов(ИмяТипа);
    КонецЕсли; 
    
    Возврат Результат;
    
КонецФункции"}
},
{0,
{"Разобрать URL",0,0,"раз[обрать]","// Dissembles URI string and returns it as a structure.
// Based on RFC 3986.
//
// Parameters:
//  StringURI - String - reference to the resource in the format:
//      <schema>://<login>:<password>@<host>:<port>/<path>?<parameters>#<anchor>
//
// Returns:
//  Structure - with keys:
//      * Schema       - String - schema.
//      * Login        - String - user login.
//      * Password     - String - user password.
//      * ServerName   - String - part : from the StringURI.
//      * Host         - String - host name.
//      * Port         - Number - port number.
//      * PathOnServer - String - part ?# from the StringURI.
//      * Parameters   - Map    - parsed parameters from the StringURI. 
//
Function РазобратьURL(Val StringURI) Export

    StringURI = TrimAll(StringURI);
    Parameters = New Map;
    
    // Schema
    Schema = """";
    Position = StrFind(StringURI, ""://"");
    If Position > 0 Then
        Schema = Lower(Left(StringURI, Position - 1));
        StringURI = Mid(StringURI, Position + 3);
    EndIf;

    // Connection string and path on the server.
    ConnectionString = StringURI;
    PathOnServer = """";
    Position = StrFind(ConnectionString, ""/"");
    If Position > 0 Then
        PathOnServer = Mid(ConnectionString, Position + 1);
        ConnectionString = Left(ConnectionString, Position - 1);
    EndIf;
    
    // Parameters
    Position = StrFind(PathOnServer, ""?"");
    If Position > 0 Then
        ParametersString = Mid(PathOnServer, Position + 1);        
        ParametersArray = StrSplit(ParametersString, ""&"");
        For Each Parameter In ParametersArray Do
            Position = StrFind(Parameter, ""="");
            If Position > 1 Then
                Parameters.Insert(Left(Parameter, Position - 1), Mid(Parameter, Position + 1));    
            EndIf;    
        EndDo;
    EndIf;
        
    // User information and server name.
    AuthorizeString = """";
    ServerName = ConnectionString;
    Position = StrFind(ConnectionString, ""@"");
    If Position > 0 Then
        AuthorizeString = Left(ConnectionString, Position - 1);
        ServerName = Mid(ConnectionString, Position + 1);
    EndIf;

    // Login and password.
    Login = AuthorizeString;
    Password = """";
    Position = StrFind(AuthorizeString, "":"");
    If Position > 0 Then
        Login = Left(AuthorizeString, Position - 1);
        Password = Mid(AuthorizeString, Position + 1);
    EndIf;

    // Host and port.
    Host = ServerName;
    Port = """";
    Position = StrFind(ServerName, "":"");
    If Position > 0 Then
        
        Host = Left(ServerName, Position - 1);
        Port = Mid(ServerName, Position + 1); 
        For Index = 1 To StrLen(Port) Do
            Symbol = Mid(Port, Index, 1);
            If Not IsNumber(Symbol) Then
                Port = """";
                Break;    
            EndIf;
            
        EndDo;
        
        If IsBlankString(Port) Then
            If Schema = ""http"" Then
                Port = ""80"";
            ElsIf Schema = ""https"" Then
                Port = ""443"";
            EndIf;
        EndIf;
 
    EndIf;

    Result = New Structure;
    Result.Insert(""Схема"", Schema);
    Result.Insert(""Логин"", Login);
    Result.Insert(""Пароль"", Password);
    Result.Insert(""Сервер"", ServerName);
    Result.Insert(""Хост"", Host);
    Result.Insert(""Порт"", ?(IsBlankString(Port), Undefined, Number(Port)));
    Result.Insert(""Путь"", PathOnServer);
    Result.Insert(""Параметры"", Parameters);

    Return Result;

EndFunction // URIStructure()"}
}
}
},
{9,
{"Управляющие",1,0,"",""},
{6,
{"Операторы ветвления",1,0,"",""},
{0,
{"Если (ввод условия)",0,0,"Есл[]и","Если <?""Условие""> Тогда
	
КонецЕсли;"}
},
{0,
{"Иначе",0,0,"Ина[че]","Иначе <?>"}
},
{0,
{"ИначеЕсли",0,0,"Ина[чеЕсл]и","ИначеЕсли <?> Тогда"}
},
{0,
{"?(,,)",0,0,"?([)]","?(<?>,,)"}
},
{0,
{"?(,,)",0,0,",([)]","?(<?>,,)"}
},
{0,
{"Конец если",0,0,"Кон[ецЕсл]и","КонецЕсли;"}
}
},
{6,
{"Циклы",1,0,"",""},
{0,
{"Пока",0,0,"Пока","Пока <?> Цикл
		
КонецЦикла;"}
},
{0,
{"Для каждого Из Цикл",0,0,"Для[Каждог]о","Для Каждого Стр Из <?> Цикл
	
КонецЦикла;"}
},
{0,
{"Для По Цикл",0,0,"Для[По]","Для <?> По  Цикл
	
КонецЦикла;"}
},
{0,
{"Продолжить",0,0,"Про[должит]ь","Продолжить;<?>"}
},
{0,
{"Прервать",0,0,"Пре[рват]ь","Прервать;<?>"}
},
{0,
{"Конец цикла",0,0,"Кон[ецЦикл]а","КонецЦикла;"}
}
},
{7,
{"Процедуры и функции",1,0,"",""},
{0,
{"Экспорт",0,0,"Экс[пор]т","Экспорт<?>"}
},
{0,
{"Процедура",0,0,"Про[цедур]а","//
<?""Выберите директиву компиляции"", ВыборВарианта, 
									""Нет"", ""//"",
									""На клиенте"", ""&НаКлиенте"",
									""На сервере"", ""&НаСервере"",
									""На сервере без контекста"", ""&НаСервереБезКонтекста"",
									""На клиенте на сервере без контекста"", ""&НаКлиентеНаСервереБезКонтекста"">
Процедура <?>() <?""Экспортная ?"", ВыборВарианта, ""Нет"", """", ""Да"", ""Экспорт"">
		
КонецПроцедуры
"}
},
{0,
{"Функция",0,0,"Фун[кци]я","<?""Выберите директиву компиляции"", ВыборВарианта, 
									""Нет"", ""//"",
									""На клиенте"", ""&НаКлиенте"",
									""На сервере"", ""&НаСервере"",
									""На сервере без контекста"", ""&НаСервереБезКонтекста"",
									""На клиенте на сервере без контекста"", ""&НаКлиентеНаСервереБезКонтекста"">
Функция <?""Имя функции"">() <?""Экспортная ?"", ВыборВарианта, ""Нет"", """", ""Да"", ""Экспорт"">
		
	Возврат Неопределено;
	
КонецФункции
"}
},
{0,
{"Возврат",0,0,"Воз[вра]т","Возврат<?>;"}
},
{0,
{"Возврат Результат",0,0,"Воз[вра]т","Результат = <?>

Возврат Результат;"}
},
{0,
{"Конец функции",0,0,"Кон[ецФункции]","КонецФункции"}
},
{0,
{"Конец процедуры",0,0,"Кон[ецПроцедуры]","КонецПроцедуры"}
}
},
{0,
{"Попытка",0,0,"Поп[ытк]а","Попытка
	<?>
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
},
{0,
{"Вызвать исключение",0,0,"Выз[ватьИсключени]е","ВызватьИсключение НСтр(""ru = '<?>'"");"}
},
{0,
{"Перем",0,0,"Пе[ре]м","<?""Директива"", ВыборВарианта,""Без"", """", ""&НаКлиенте"", ""&НаКлиенте"", ""&НаСервере"","" &НаСервере"">
Перем <?""Введите имя переменной""><?""Экспорт ?"", ВыборВарианта, ""Не экспортируемая"", "";"", ""Экспортируемая"","" Экспорт;"">"}
},
{0,
{"Неопределено",0,0,"Нео[пределен]о","Неопределено<?>"}
},
{0,
{"Начать транзакцию",0,0,"Нач[атьТранзакци]ю","НачатьТранзакцию();

Попытка
	
	<?>
	
    ЗафиксироватьТранзакцию();
	
Исключение
    ОтменитьТранзакцию();
КонецПопытки;
"}
},
{0,
{"#Область",0,0,"Обл[аст]ь","#Область <? ""Имя области"">
	
#КонецОбласти"}
}
},
{5,
{"Права",1,0,"",""},
{0,
{"Право доступа",0,0,"Пра[воДоступ]а","ПравоДоступа(""<?"""", ВыборВарианта,
				""Чтение"", ""Чтение"",
				""Добавление"", ""Добавление"",
				""Изменение"", ""Изменение"",
				""Удаление"", ""Удаление"",
				""Проведение"", ""Проведение"",
				""ОтменаПроведения"", ""ОтменаПроведения"",
				""Просмотр"", ""Просмотр"",
				""Интерактивное добавление"", ""ИнтерактивноеДобавление"",
				""Редактирование"", ""Редактирование"",
				""Интерактивная пометка удаления"", ""ИнтерактивнаяПометкаУдаления"",
				""Интерактивное снятие пометки удаления"", ""ИнтерактивноеСнятиеПометкиУдаления"",
				""Интерактивное удаление помеченных"", ""ИнтерактивноеУдалениеПомеченных"",
				""Интерактивное проведение"", ""ИнтерактивноеПроведение"",
				""Интерактивное проведение не оперативное"", ""ИнтерактивноеПроведениеНеОперативное"",
				""Интерактивная отмена проведения"", ""ИнтерактивнаяОтменаПроведения"",
				""Интерактивное изменение проведенных"", ""ИнтерактивноеИзменениеПроведенных"",
				""Ввод по строке"", ""ВводПоСтроке"",
				""Управление итогами"", ""УправлениеИтогами"",
				""Использование"", ""Использование"",
				""Интерактивное удаление"", ""ИнтерактивноеУдаление"",
				""Администрирование"", ""Администрирование"",
				""Монопольный режим"", ""МонопольныйРежим"",
				""Активные пользователи"", ""АктивныеПользователи"",
				""Журнал регистрации"", ""ЖурналРегистрации"",
				""Внешнее соединение"", ""ВнешнееСоединение"",
				""Automation"", ""Automation"",
				""Интерактивное открытие внешних обработок"", ""ИнтерактивноеОткрытиеВнешнихОбработок"",
				""Интерактивное открытие внешних отчетов"", ""ИнтерактивноеОткрытиеВнешнихОтчетов"",
				""Получение"", ""Получение"",
				""Установка"", ""Установка"",
				""Интерактивная активация"", ""ИнтерактивнаяАктивация"",
				""Старт"", ""Старт"",
				""Интерактивный старт"", ""ИнтерактивныйСтарт"",
				""Выполнение"", ""Выполнение"",
				""Интерактивное выполнение"", ""ИнтерактивноеВыполнение"",
				""Вывод"", ""Вывод"",
				""Обновление конфигурации базы данных"", ""ОбновлениеКонфигурацииБазыДанных"",
				""Тонкий клиент"", ""ТонкийКлиент"",
				""Веб клиент"", ""ВебКлиент"",
				""Толстый клиент "", ""ТолстыйКлиент"">"",<?> ""<ОбъектМетаданных>"", ""<Пользователь/Роль>"", ""<СтандартныйРеквизитСтандартнаяТабличнаяЧасть>"")<?>"}
},
{0,
{"Роль доступна",0,0,"Рол[ьДоступн]а","РольДоступна(""<?"""", ОбъектМетаданных, ""Роль"">"")<?>"}
},
{0,
{"Привилегированный режим",0,0,"При[вилегированныйРежи]м","ПривилегированныйРежим();<?>"}
},
{0,
{"Установить привилегированный режим",0,0,"УПРе[жим]","УстановитьПривилегированныйРежим(<?"""", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">);"}
},
{0,
{"Установить безопасный режим",0,0,"УБР","УстановитьБезопасныйРежим(<?"""", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">);"}
}
},
{16,
{"Прочие",1,0,"",""},
{3,
{"Работа с Типами",1,0,"",""},
{0,
{"Тип",0,0,"Тип(","Тип(""<?""Выбор типа"", ВыборТипа>"")"}
},
{0,
{"ДокументСсылка.",0,0,"Док[ументСсылка].","ДокументСсылка.<?""Выбрать документ"", Документ>"}
},
{0,
{"СправочникСсылка.",0,0,"Спр[авочникСсылка].","СправочникСсылка.<?""Выбрать справочник"", Справочник>"}
}
},
{5,
{"Конструкторы и представления",1,0,"",""},
{0,
{"Формат",0,0,"Фор[ма]т","Формат(<?>, ""<?, ФорматнаяСтрока>"")"}
},
{0,
{"Конструктор описания типов",0,1,"Опи[саниеТипо]в","<?""Конструктор описания типов"", КонструкторОписанияТипов>"}
},
{0,
{"Представление периода",0,0,"Пре[дставлениеПериод]а","ПредставлениеПериода(""<ДатаНачалаПериода>"", ""<ДатаОкончанияПериода>"", ""ФП=Истина""); "}
},
{0,
{"Число прописью",0,0,"Чис[лоПропись]ю","ЧислоПрописью(<?>, ""Л=uk_UA"", ""гривня, гривні, гривень, ж, копійка, копійки, копійок, ж, 2"");"}
},
{0,
{"Шрифт",0,0,"Ш[риф]т","<?>Новый Шрифт(, , , , , ); // Имя шрифта, Размер, Жирный, Наклонный, Подчеркнутый, Зачеркнутый"}
}
},
{0,
{"Отладка переменной",0,0,"Отл[адк]а","// -= ОТЛАДКА ПЕРЕМЕННОЙ =-
<?>Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ""<?""Введите переменную""> = <""+?(<?""Введите переменную""> = Неопределено, ""Неопределено"", <?""Введите переменную"">)+"">"";
Сообщение.Сообщить();
"}
},
{0,
{"DIV",0,0,"див","// логический блок: <?""Назначение логического блока"">
Если Истина Тогда
	
КонецЕсли; //"}
},
{0,
{"Инкримент",0,0,"++","<?""ИмяПеременной""> = <?""ИмяПеременной""> + 1<?>;"}
},
{0,
{"Декремент",0,0,"--","<?""ИмяПеременной""> = <?""ИмяПеременной""> - 1<?>;"}
},
{0,
{"Инициализация переменной",0,0,"==","= <?""Начальное значение"", ВыборВарианта, ""\""\"""", ""\""\"""", ""Неопределено"", ""Неопределено"", ""0"", ""0"", ""Ложь"", ""Ложь"", ""Истина"", ""Истина"", ""Пустая дата"", ""Дата(1,1,1,0,0,0)"">"}
},
{10,
{"Сохранение/Восстановление значений",1,0,"",""},
{0,
{"Сохранить значение ",0,0,"Сох[ранитьЗначени]е","СохранитьЗначение(<?>""<Имя>"", ""<Значение>"");"}
},
{0,
{"Восстановить значение ",0,0,"Вос[становитьЗначени]е","ВосстановитьЗначение(<?>""<Имя>"");"}
},
{0,
{"Значение в строку внутр",0,0,"Знач[ениеВСтрокуВнут]р","ЗначениеВСтрокуВнутр(<?>""<Значение>"");"}
},
{0,
{"Значение из строки внутр",0,0,"Знач[ениеИзСтрокиВнут]р","ЗначениеИзСтрокиВнутр(<?>""<Строка>"");"}
},
{0,
{"Значение в файл",0,0,"Знач[ениеВФай]л","ЗначениеВФайл(<?>""<ИмяФайла>"", ""<Значение>"");"}
},
{0,
{"Значение из файла",0,0,"Знач[ениеИзФайл]а","ЗначениеИзФайла(<?>""<ИмяФайла>"");"}
},
{0,
{"Данные формы в значение",0,0,"ДанныеФ[ормыВЗначени]е","ДанныеФормыВЗначение(<?>, Тип(""<?""Выбор типа"", ВыборТипа>""));"}
},
{0,
{"Значение в данные формы",0,0,"ЗначениеВ[ДанныеФорм]ы","ЗначениеВДанныеФормы(<?>, ""Объект"");"}
},
{0,
{"Реквизит формы в значение",0,0,"РеквизитФ[ормыВЗначени]е","РеквизитФормыВЗначение(""<?>"", Тип(""""));"}
},
{0,
{"Значение в реквизит формы",0,0,"ЗначениеВ[РеквизитФорм]ы","ЗначениеВРеквизитФормы(<?>""Значение"", ""ИмяРеквизита>"");"}
}
},
{0,
{"Получить общий макет",0,0,"Полу[читьОбщийМаке]т","ПолучитьОбщийМакет(""<?"""", ОбъектМетаданных, ""ОбщийМакет"">"");"}
},
{0,
{"Получить общую форму",0,0,"Пол[учитьОбщуюФорм]у","ПолучитьОбщуюФорму(""<?"""", ОбъектМетаданных, ""ОбщаяФорма"">"", <?>""<Владелец>"", ""<КлючУникальности>"");"}
},
{2,
{"Предопределенные",1,0,"",""},
{0,
{"Предопределенное значение",0,0,"Пре[допределенноеЗначени]е","ПредопределенноеЗначение(<?>""<ИмяПредопределенногоЗначения>"");"}
},
{0,
{"Получить полное имя предопределенного",0,0,"Имя[Предопределенног]о","ПолучитьПолноеИмяПредопределенногоЗначения(<?>""<Ссылка>"");"}
}
},
{0,
{"Метаданные",0,0,"Мет[аданны]е","Метаданные<?>"}
},
{0,
{"Пустая cтрока",0,0,"Пус[таяСтрок]а","ПустаяСтрока(<?>)"}
},
{0,
{"Это новый",0,0,"Это[Новы]й","ЭтоНовый()"}
},
{0,
{"Режим записи документа",0,0,"Реж[имЗаписиДокумент]а","РежимЗаписиДокумента<?>"}
},
{0,
{"Удаление объекта",0,0,"Уда[лениеОбъект]а","ОбъектаУдаления = Новый УдалениеОбъекта(<?""Ссылка на удаляемый объект"">);
ОбъектаУдаления.ОбменДанными.Загрузка = Истина;
ОбъектаУдаления.Записать();

<?>"}
}
},
{15,
{"Раскладка клавиатуры",1,0,"",""},
{0,
{">",0,0,"Ю",">"}
},
{0,
{"<",0,0,"Б","<"}
},
{0,
{"<>",0,0,"БЮ","<>"}
},
{0,
{"<=",0,0,"Б=","<="}
},
{0,
{">=",0,0,"Ю=",">="}
},
{0,
{"ЕстьТгдд",0,0,"ЕстьТ[гдд]","ЕстьNULL(<?>, 0)"}
},
{0,
{"NULL",0,0,"тгдд","NULL"}
},
{0,
{"[]",0,0,"хъ","[<?>]"}
},
{0,
{"/ как |",0,0,"/","|  <?>"}
},
{0,
{"'",0,0,"ээ","'<?>'"}
},
{0,
{"&(?)",0,0,"?[]","&<?>"}
},
{0,
{"?(&)",0,0,"&",""}
},
{0,
{"Web цвета",0,0,"Ц[ве]т","WebЦвета"}
},
{0,
{"Windows цвета ",0,0,"Ц[ве]т","WindowsЦвета"}
},
{0,
{"№ на #",0,0,"№","#"}
}
},
{11,
{"Коллекции значений",1,0,"",""},
{0,
{"Список значений",0,0,"Спи[сокЗначени]й","Новый СписокЗначений<?>"}
},
{0,
{"Структура (просто)",0,0,"Стр[уктур]а","Новый Структура;
<?>"}
},
{0,
{"Структура (С переменной)",0,0,"Стр[уктур]а","<? ""Имя переменной""> = Новый Структура;"}
},
{0,
{"Структура (с ключем)",0,0,"Стр[уктур]а","Новый Структура(""<?>"", );"}
},
{0,
{"Структура (С переменной и ключем)",0,0,"Стр[уктур]а","<? ""Имя переменной""> = Новый Структура(""<?>"", );"}
},
{0,
{"Структура.Вставить()",0,0,"Стр[уктура]","Структура.Вставить("""", <?>);"}
},
{0,
{"Соответствие",0,0,"Соо[тветстви]е","Новый Соответствие<?>"}
},
{0,
{"ДеревоЗначений",0,0,"Дер[евоЗначений]","Новый ДеревоЗначений<?>"}
},
{0,
{"Массив",0,0,"Мас[си]в","Новый Массив<?>"}
},
{0,
{"Таблица значений",0,0,"Таб[лицаЗначени]й","Новый ТаблицаЗначений<?>"}
},
{0,
{"Новая cтрока",0,0,"Нов[аяСтрок]а","НоваяСтрока = <?>.Добавить();"}
}
},
{6,
{"Запросы",1,0,"",""},
{0,
{"Запрос с конструктором",0,0,"Зап[ро]с","Запрос = Новый Запрос;

Запрос.УстановитьПараметр("""", <?>);

Запрос.Текст = ""<?"""", ТекстЗапроса>"";

РезультатЗапроса = Запрос.Выполнить();
"}
},
{0,
{"Запрос вручную",0,0,"Зап[ро]с","Запрос = Новый Запрос;

Запрос.УстановитьПараметр("""",);

ТекстЗапроса = ""
		|ВЫБРАТЬ
		|   <?>
		|
		|"";

Запрос.Текст = ТекстЗапроса;

РезультатЗапроса = Запрос.Выполнить();"}
},
{0,
{"Подключить менеджер временных таблиц",0,0,"Мен[еджерВременныхТабли]ц","<?""Имя менеджена таблиц""> = Новый МенеджерВременныхТаблиц;
<?>Запрос.МенеджерВременныхТаблиц = <?""Имя менеджена таблиц"">;
"}
},
{0,
{"Установить параметр",0,0,"Уст[ановитьПарамет]р","УстановитьПараметр("""", <?>);"}
},
{0,
{"Выборка обход",0,0,"Выб[орк]а","Выборка = <?>.Выбрать(ОбходРезультатаЗапроса.<?"""", ВыборВарианта, ""Прямой"", ""Прямой"", ""По группировкам"", ""ПоГруппировкам"", ""По группировкам с иерархией"", ""ПоГруппировкамСИерархией"">);

Пока Выборка.Следующий() Цикл

КонецЦикла; "}
},
{7,
{"Язык запросов",1,0,"",""},
{7,
{"Объекты метаданных",1,0,"",""},
{0,
{"Документ",0,0,"Док[умен]т","Документ.<?"""", ОбъектМетаданных, ""Документ"", ""Документ.ТабличнаяЧасть"">"}
},
{0,
{"Справочник",0,0,"Спр[авочни]к","Справочник.<?"""", ОбъектМетаданных, ""Справочник"", ""Справочник.ТабличнаяЧасть"">"}
},
{0,
{"Перечисление",0,0,"Переч[ислени]е","Перечисление.<?"""", ОбъектМетаданных, ""Перечисление"">"}
},
{0,
{"РегистрСведений",0,0,"Рег[истрСведени]й","РегистрСведений.<?"""", ОбъектМетаданных, ""РегистрСведений""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""СрезПервых"", "".СрезПервых(<?>)"", ""СрезПоследних"", "".СрехПоследних(<?>)"">"}
},
{0,
{"РегистрНакопления",0,0,"Рег[истрНакоплени]я","РегистрНакопления.<?"""", ОбъектМетаданных, ""РегистрНакопления""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"">"}
},
{0,
{"РегистрБухгалтерии",0,0,"Рег[истрБухгалтери]и","РегистрБухгалтерии.<?"""", ОбъектМетаданных, ""РегистрБухгалтерии""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Субконто"", "".Субконто"", ""ДвиженияССубконто"", "".ДвиженияССубконто(<?>)"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"", ""ОборотыДтКт"", "".ОборотыДтКт(<?>)"">"}
},
{0,
{"РегистрРасчета",0,0,"Рег[истрРасчет]а","РегистрРасчета.<?"""", ОбъектМетаданных, ""РегистрРасчета"", ""РегистрРасчета.Перерасчет"">"}
}
},
{0,
{"ВЫБОР",0,0,"ВЫБОР[КОГД]А","ВЫБОР КОГДА <?> ТОГДА ИНАЧЕ КОНЕЦ"}
},
{0,
{"ЛЕВОЕ СОЕДИНЕНИЕ",0,0,"ЛЕВОЕ","ЛЕВОЕ СОЕДИНЕНИЕ "}
},
{0,
{"ПРАВОЕ СОЕДИНЕНИЕ",0,0,"ПРАВОЕ","ПРАВОЕ СОЕДИНЕНИЕ "}
},
{0,
{"ПОЛНОЕ СОЕДИНЕНИЕ ",0,0,"ПОЛНОЕ","ПОЛНОЕ СОЕДИНЕНИЕ "}
},
{0,
{"ВНУТРЕННЕЕ СОЕДИНЕНИЕ",0,0,"ВНУТР[ЕННЕ]Е","ВНУТРЕННЕЕ СОЕДИНЕНИЕ "}
},
{0,
{"ЗНАЧЕНИЕ",0,0,"ЗНА[ЧЕНИ]Е","ЗНАЧЕНИЕ(<?"""", ВыборВарианта, ""Перечисление"", ""Перечисление."",
							  ""Справочник"", ""Справочник."",
							  ""ПланСчетов"", ""ПланСчетов."",
							  ""ПланВидовХарактеристик"", ""ПланВидовХарактеристик."",
							  ""ПланВидовРасчета"", ""ПланВидовРасчета."",
							  ""БизнесПроцесс"", ""БизнесПроцесс.<Имя>.ТочкаМаршрута.<Имя>""><?>)"}
}
}
},
{14,
{"Прикладные",1,0,"",""},
{0,
{"ВыборСчетаДт",0,0,"СчетДт=","СчетДт = <?"""", ПланСчетовПредопределенныеДанные>;"}
},
{0,
{"ВыборСчетаКт",0,0,"СчетКт=","СчетКт = <?"""", ПланСчетовПредопределенныеДанные>;"}
},
{2,
{"Константы",1,0,"",""},
{0,
{"Константа получить",0,0,"Кон[стант]ы","Константы.<?"""", Константа>.Получить();

<?>"}
},
{0,
{"Константа установить",0,0,"Кон[стант]ы","Константы.<?"""", Константа>.Установить(<?""Значение константы"">);

<?>"}
}
},
{5,
{"Справочники",1,0,"",""},
{0,
{"Обход элементов справочника",0,0,"Справоч[никВыборк]а","Выборка = Справочники.<?"""", Справочник>.<?"""", ВыборВарианта, ""Выбрать"", ""Выбрать"", ""Выбрать иерархически"", ""ВыбратьИерархически"">();
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Найти по коду элемент справочника",0,0,"Найти[ПоКод]у","НайденныйЭлемент = Справочники.<?"""", Справочник>.НайтиПоКоду(<?>);"}
},
{0,
{"Найти по наименованию элемент справочника",0,0,"Найти[ПоНаименовани]ю","НайденныйЭлемент = Справочники.<?"""", Справочник>.НайтиПоНаименованию(<?>);"}
},
{0,
{"Найти по реквизиту элемент справочника",0,0,"Найти[ПоРеквизит]у","НайденныйЭлемент = Справочники.<?"""", Справочник>.НайтиПоРеквизиту(<?>);"}
},
{0,
{"Предопределенный элемент справочника",0,0,"Пред[определенны]й","<?"""", СправочникПредопределенныеДанные>"}
}
},
{2,
{"Документы",1,0,"",""},
{0,
{"Обход документов",0,0,"Докум[ентВыборк]а","Выборка = Документы.<?"""", Документ>.Выбрать();
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Движения",0,0,"Дви[жени]я","Движения.<?""Выбор регистра"", ОбъектМетаданных, ""РегистрСведений"", ""РегистрНакопления"", ""РегистрБухгалтерии"", ""РегистрРасчета"">"}
}
},
{2,
{"Отчеты",1,0,"",""},
{0,
{"Создать отчет",0,0,"Отч[ет]ы","<?> = Отчеты.<?"""", Отчет>.Создать();
"}
},
{0,
{"Открыть форму отчета",0,0,"Отч[ет]ы","ФормаОтчета = Отчеты.<?"""", Отчет>.ПолучитьФорму(<?>);
Если ФормаОтчета.Открыта() Тогда
	ФормаОтчета.Активизировать();
Иначе
	ФормаОтчета.Открыть();
КонецЕсли;"}
}
},
{2,
{"Обработки",1,0,"",""},
{0,
{"Создать обработку",0,0,"Обра[ботк]и","<?> = Обработки.<?"""", Обработка>.Создать();
"}
},
{0,
{"Открыть форму обработки",0,0,"Обра[ботк]и","ФормаОбработки = Обработки.<?"""", Обработка>.ПолучитьФорму(<?>);
Если ФормаОбработки.Открыта() Тогда
	ФормаОбработки.Активизировать();
Иначе
	ФормаОбработки.Открыть();
КонецЕсли;"}
}
},
{5,
{"Планы видов характеристик",1,0,"",""},
{0,
{"Обход элементов видов характеристик",0,0,"ПланВ[идовХарактеристикВыборк]а","Выборка = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.<?"""", ВыборВарианта, ""Выбрать"", ""Выбрать"", ""Выбрать иерархически"", ""ВыбратьИерархически"">();
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Найти по коду элемент ПВХ",0,0,"Найти[ПоКод]у","НайденныйЭлемент = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.НайтиПоКоду(<?>);"}
},
{0,
{"Найти по наименованию элемент ПВХ",0,0,"Найти[ПоНаименовани]ю","НайденныйЭлемент = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.НайтиПоНаименованию(<?>);"}
},
{0,
{"Найти по реквизиту элемент ПВХ",0,0,"Найти[ПоРеквизит]у","НайденныйЭлемент = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.НайтиПоРеквизиту(<?>);"}
},
{0,
{"Предопределенный элемент ПВХ",0,0,"Пред[определенны]й","<?"""", ПланВидовХарактеристикПредопределенныеДанные>"}
}
},
{5,
{"Планы счетов",1,0,"",""},
{0,
{"Обход элементов плана счетов",0,0,"ПланС[четовВыборк]а","Выборка = ПланыСчетов.<?"""", ПланСчетов>.<?"""", ВыборВарианта, ""Выбрать"", ""Выбрать"", ""Выбрать иерархически"", ""ВыбратьИерархически"">();
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Найти по коду элемент ПС",0,0,"Найти[ПоКод]у","НайденныйЭлемент = ПланыСчетов.<?"""", ПланСчетов>.НайтиПоКоду(<?>);"}
},
{0,
{"Найти по наименованию элемент ПС",0,0,"Найти[ПоНаименовани]ю","НайденныйЭлемент = ПланыСчетов.<?"""", ПланСчетов>.НайтиПоНаименованию(<?>);"}
},
{0,
{"Найти по реквизиту элемент ПС",0,0,"Найти[ПоРеквизит]у","НайденныйЭлемент = ПланыСчетов.<?"""", ПланСчетов>.НайтиПоРеквизиту(<?>);"}
},
{0,
{"Предопределенный элемент ПС",0,0,"Пред[определенны]й","<?"""", ПланСчетовПредопределенныеДанные>"}
}
},
{5,
{"Планы видов расчета",1,0,"",""},
{0,
{"Обход видов расчета",0,0,"ПланВ[идовРасчетаВыборк]а","Выборка = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.Выбрать();
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Найти по коду элемент ПВР",0,0,"Найти[ПоКод]у","НайденныйЭлемент = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.НайтиПоКоду(<?>);"}
},
{0,
{"Найти по наименованию элемент ПВР",0,0,"Найти[ПоНаименовани]ю","НайденныйЭлемент = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.НайтиПоНаименованию(<?>);"}
},
{0,
{"Найти по реквизиту элемент ПВР",0,0,"Найти[ПоРеквизит]у","НайденныйЭлемент = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.НайтиПоРеквизиту(<?>);"}
},
{0,
{"Предопределенный элемент ПВХ",0,0,"Пред[определенны]й","<?"""", ПланВидовРасчетаПредопределенныеДанные>"}
}
},
{1,
{"Бизнес-процессы",1,0,"",""},
{0,
{"Обход бизнес-процессов",0,0,"БизнесП[роцессВыборк]а","Выборка = БизнесПроцессы.<?"""", БизнесПроцесс>.Выбрать();
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла;"}
}
},
{1,
{"Задачи",1,0,"",""},
{0,
{"Обход задач",0,0,"ЗадачаВ[ыборк]а","Выборка = Задачи.<?"""", Задача>.Выбрать();
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла;"}
}
},
{1,
{"Перечисления",1,0,"",""},
{0,
{"Значение перечисления",0,0,"Переч[ислени]я","Перечисления.<?"""", ЗначениеПеречисления>"}
}
},
{4,
{"Набор записей",1,0,"",""},
{0,
{"Регистр сведений",0,0,"Набор[Записе]й","НаборЗаписей = РегистрыСведений.<?"""", РегистрСведений>.СоздатьНаборЗаписей();
"}
},
{0,
{"Регистр накопления",0,0,"Набор[Записе]й","НаборЗаписей = РегистрыНакопления.<?"""", РегистрНакопления>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"Регистр бухгалтерии",0,0,"Набор[Записе]й","НаборЗаписей = РегистрыБухгалтерии.<?"""", РегистрБухгалтерии>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"Регистр расчета",0,0,"Набор[Записе]й","НаборЗаписей = РегистрыРасчета.<?"""", РегистрРасчета>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
}
}
},
{10,
{"Информационные сообщения",1,0,"",""},
{0,
{"Состояние",0,0,"Сос[тояни]е","Состояние(НСтр(""ru = '<?>'""));"}
},
{0,
{"Сообщить",0,0,"Соо[бщит]ь","Сообщить(НСтр(""ru = '<?>'""), СтатусСообщения.<?""подсказка"", ВыборВарианта, ""Информация"", ""Информация"", ""Без статуса"", ""БезСтатуса"", ""Обычное"", ""Обычное"", ""Внимание"", ""Внимание"", ""Важное"", ""Важное"", ""Очень важное"", ""ОченьВажное"">);"}
},
{0,
{"Сообщение пользователю",0,0,"Сооб[щениеПользовател]ю","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = НСтр(""ru = '<?>'"");
Сообщение.Поле = """";
Сообщение.УстановитьДанные();
Сообщение.Сообщить();"}
},
{0,
{"Показать оповещение пользователя",0,0,"Пок[азатьОповещениеПользовател]я","ПоказатьОповещениеПользователя(НСтр(""ru = '<?>'""), ""<НавигационнаяСсылка>"", ""<Пояснение>"", ""<Картинка>""); "}
},
{0,
{"Предупреждение",0,0,"Пре[дупреждени]е","Предупреждение(НСтр(""ru = '<?>'""), 30);"}
},
{0,
{"Вопрос (с оповещением)",0,1,"Во[прос]","ОписаниеОповещения<?""Введите имя оповещения""> = Новый ОписаниеОповещения(""ОписаниеОповещения<?""Введите имя оповещения"">"", ЭтотОбъект);

ПоказатьВопрос(ОписаниеОповещения<?""Введите имя оповещения"">, ""<?""Текст вопроса"">"", РежимДиалогаВопрос.ДаНет);

&НаКлиенте
Процедура ОписаниеОповещения<?""Введите имя оповещения"">(Ответ, Доп) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	<?>
	
КонецПроцедуры // ОписаниеОповещения<?""Введите имя оповещения"">

"}
},
{0,
{"Вопрос с анализом результата",0,0,"От[ве]т","Ответ = Вопрос(НСтр(""ru = '<?""Текст вопроса"">'""), <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);
Если Ответ <?"""", ВыборВарианта, ""Равен"", ""="", ""Не равен"", ""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Таймаут"", ""КодВозвратаДиалога.Таймаут""> Тогда
	<?>
КонецЕсли; "}
},
{0,
{"Информация об ошибке",0,0,"Инф[ормацияОбОшибк]е","ИнфоОшибки = ИнформацияОбОшибке();
Сообщить(""Описание = '"" + ИнфоОшибки.Описание + ""'"", СтатусСообщения.Внимание);
Сообщить(""Модуль = '"" + ИнфоОшибки.ИмяМодуля + ""'"", СтатусСообщения.Важное);
Сообщить(""НомерСтроки = '"" + ИнфоОшибки.НомерСтроки + ""'"", СтатусСообщения.Важное);
Сообщить(""ИсходнаяСтрока = '"" + ИнфоОшибки.ИсходнаяСтрока + ""'"", СтатусСообщения.Важное);"}
},
{0,
{"Открыть значение",0,0,"Отк[рытьЗначени]е","ОткрытьЗначение(<?>);"}
},
{4,
{"Функции для вызова диалога ввода данных",1,0,"",""},
{0,
{"Ввести дату",0,0,"Вве[стиДату]","ЗначениеВведено = ВвестиДату(<?>, ""Укажите дату"", ЧастиДаты.<?""Части даты"", ВыборВарианта, ""Дата"", ""Дата"", ""Дата и время"", ""ДатаВремя"", ""Время"", ""Время"">);"}
},
{0,
{"Ввести значение",0,0,"Вве[стиЗначение]","ЗначениеВведено = ВвестиЗначение(<?>, ""Введите "", <?"""", КонструкторОписанияТипов>);"}
},
{0,
{"Ввести строку",0,0,"Вве[стиСтроку]","ЗначениеВведено = ВвестиСтроку(<?>, ""Введите "", <?""Длина строки"">, <?"""", ВыборВарианта, ""Не многострочная"", ""Ложь"", ""Многострочная"", ""Истина"">);"}
},
{0,
{"Ввести число",0,0,"Вве[стиЧисло]","ЗначениеВведено = ВвестиЧисло(<?>, ""Введите "", <?""Длина"">, <?""Точность"">);"}
}
}
},
{2,
{"Табличный документ",1,0,"",""},
{0,
{"Получить область",0,0,"Обл[аст]ь","Область<?""Название области""> = <?>.ПолучитьОбласть(""<?""Название области"">"");"}
},
{0,
{"Получить макет",0,0,"Пол[учитьМаке]т","ПолучитьМакет(""<?>"");"}
}
},
{5,
{"Инструкции предпроцессору",1,0,"",""},
{0,
{"#Если (инструкция препрероцессору)",0,0,"№Ес[ли]","#Если <?"""", ВыборВарианта, ""Клиент"", ""Клиент"",	
							""На клиенте"", ""НаКлиенте"",								
							""Сервер"", ""Сервер"",							
							""На сервере"", ""НаСервере"",
							""Тонкий клиент"", ""ТонкийКлиент"",
							""Веб клиент"", ""ВебКлиент"",							
							""Толстый клиент обычное приложение"", ""ТолстыйКлиентОбычноеПриложение"",
							""Мобильное приложение Клиент"", ""МобильноеПриложениеКлиент"",
							""Мобильное приложение Сервер"", ""МобильноеПриложениеСервер"",
							""Толстый клиент управляемое приложение"", ""ТолстыйКлиентУправляемоеПриложение"",							
							""ВнешнееСоединение"", ""ВнешнееСоединение""> Тогда
<?>
#КонецЕсли"}
},
{0,
{"#Если (инструкция препрероцессору)",0,0,"#Ес[ли]","#Если <?"""", ВыборВарианта, ""Клиент"", ""Клиент"",	
							""На клиенте"", ""НаКлиенте"",								
							""Сервер"", ""Сервер"",							
							""На сервере"", ""НаСервере"",
							""Тонкий клиент"", ""ТонкийКлиент"",
							""Веб клиент"", ""ВебКлиент"",							
							""Толстый клиент обычное приложение"", ""ТолстыйКлиентОбычноеПриложение"",
							""Мобильное приложение Клиент"", ""МобильноеПриложениеКлиент"",
							""Мобильное приложение Сервер"", ""МобильноеПриложениеСервер"",
							""Толстый клиент управляемое приложение"", ""ТолстыйКлиентУправляемоеПриложение"",							
							""ВнешнееСоединение"", ""ВнешнееСоединение""> Тогда
<?>
#КонецЕсли"}
},
{0,
{"&На...",0,0,"?[На]","&<?""Выберите директиву компиляции"", ВыборВарианта,
							""На клиенте"", ""НаКлиенте"",
							""На сервере"", ""НаСервере"",							
							""На сервере без контекста"", ""НаСервереБезКонтекста"",
							""На клиенте на сервере"", ""НаКлиентеНаСервере"",
							""На клиенте на сервере без контекста"", ""НаКлиентеНаСервереБезКонтекста"">"}
},
{0,
{"&На...",0,0,"&[На]","&<?""Выберите директиву компиляции"", ВыборВарианта,
							""На клиенте"", ""НаКлиенте"",
							""На сервере"", ""НаСервере"",							
							""На сервере без контекста"", ""НаСервереБезКонтекста"",
							""На клиенте на сервере"", ""НаКлиентеНаСервере"",
							""На клиенте на сервере без контекста"", ""НаКлиентеНаСервереБезКонтекста"">"}
},
{0,
{"Директива компиляции",0,0,"Дир[ектива]","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">"}
}
},
{13,
{"Сокращения",1,0,"",""},
{5,
{"Даты время",1,0,"",""},
{0,
{"Начало месяца",0,0,"Нач[алоМесяца]","НачалоМесяца(<?>)"}
},
{0,
{"Конец месяца",0,0,"Кон[ецМесяца]","КонецМесяца(<?>)"}
},
{0,
{"Начало дня",0,0,"Нач[алоДня]","НачалоДня(<?>)"}
},
{0,
{"Конец дня",0,0,"Кон[ецДня]","КонецДня(<?>)"}
},
{0,
{"Текущая дата",0,0,"Тек[ущаяДата]","ТекущаяДата()"}
}
},
{4,
{"Периоды",1,0,"",""},
{0,
{"Период действия начало",0,0,"ПДН","ПериодДействияНачало"}
},
{0,
{"Период действия конец",0,0,"ПДК","ПериодДействияКонец"}
},
{0,
{"Базовый период начало",0,0,"БПН","БазовыйПериодНачало"}
},
{0,
{"Базовый период конец",0,0,"БПК","БазовыйПериодКонец"}
}
},
{6,
{"Специфические",1,0,"",""},
{0,
{"Новый Уникальный Идентификатор",0,0,"Уни[кальныйИдентификатор]","Новый УникальныйИдентификатор"}
},
{0,
{"Запись в журнал регистрации",0,0,"Зап[исьЖурналаРегистраци]и","ЗаписьЖурналаРегистрации(<?>""Событие"",
						УровеньЖурналаРегистрации.Информация,
						""ОбъектМетаданных"",
						""Данные"",
						""Комментарий"",
						РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);"}
},
{0,
{"Обработка прерывания пользователя ",0,0,"Обра[боткаПрерыванияПользовател]я","#Если ТолстыйКлиентОбычноеПриложение Тогда
<?>ОбработкаПрерыванияПользователя();
#КонецЕсли"}
},
{0,
{"Национальная строка",0,0,"НСтр[(]","НСтр(""ru = '<?>'"")"}
},
{0,
{"Обмен данными загрузка",0,0,"Обм[енДанным]и","ОбменДанными.Загрузка = Истина;<?>"}
},
{0,
{"Очистить сообщения",0,0,"Очи[ститьСообщения]","<?>ОчиститьСообщения();"}
}
},
{0,
{"Планы видов характеристик",0,0,"ПВХ","ПланыВидовХарактеристик<?>"}
},
{0,
{"Планы видов расчета",0,0,"ПВР","ПланыВидовРасчета<?>"}
},
{0,
{"Планы cчетов",0,0,"ПС","ПланыСчетов<?>"}
},
{0,
{"Значение заполнено",0,0,"Зна[чениеЗаполнен]о","ЗначениеЗаполнено(<?""Введите значение"">)"}
},
{0,
{"Значение НЕ заполнено",0,0,"Зна[чениеЗаполнен]о","НЕ ЗначениеЗаполнено(<?""Введите значение"">)"}
},
{0,
{"Заполнить значения свойств",0,0,"Зап[олнитьЗначенияСвойст]в","ЗаполнитьЗначенияСвойств(<?>,);"}
},
{0,
{"СокрЛП",0,0,"Сок[рЛ]П","СокрЛП(<?>)"}
},
{0,
{"СтрЗаменить",0,0,"СтрЗ[аменит]ь","СтрЗаменить(<?>, """", """")"}
},
{0,
{"Получить объект",0,0,"Пол[учитьОбъек]т","ПолучитьОбъект()<?>"}
},
{0,
{"Результат",0,0,"Рез[ульта]т","Результат"}
}
},
{6,
{"Комментарии",1,0,"",""},
{0,
{"Комментарий (изменение + )",0,0,"/из[менение]","// +++ { [<?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">]
<?>
// } +++ [<?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">]"}
},
{0,
{"Комментарий (именованное изменение)",0,0,"/из[менение]","// { <?"""", ПолноеИмяПользователя> [<?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">]
<?>
// } <?"""", ПолноеИмяПользователя> [<?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">]"}
},
{0,
{"Комментарий в две строки",0,0,"/*","// <?>
//"}
},
{0,
{"Вставить скобки временного кода",0,0,"/0","// -= ВРЕМЕННЫЙ КОД: УДАЛИТЬ ПОСЛЕ ОТЛАДКИ  =-
// { <?"""", ПолноеИмяПользователя> [<?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">]
<?>
// } <?"""", ПолноеИмяПользователя> [<?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">]
"}
},
{0,
{"Отчерк",0,0,"/-","<?>//__________________________________________________________________________________________________________________________"}
},
{0,
{"Шапка комментария",0,0,"/+","<?>////////////////////////////////////////////////////////////////////////////////"}
}
},
{2,
{"Построитель отчета",1,0,"",""},
{0,
{"Построитель вручную",0,0,"Пос[троител]ь","Построитель = Новый ПостроительОтчета;

Построитель.Текст = ""
|ВЫБРАТЬ
|   <?>
|
|
|
|
|
|
|
|"";

Построитель.ЗаполнитьНастройки();

Построитель.Параметры.Вставить("""", );

Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Лето);

Построитель.Выполнить();"}
},
{0,
{"Построитель конструктором",0,0,"Пос[троител]ь","Построитель = Новый ПостроительОтчета;

Построитель.Текст = ""<?"""", ТекстЗапроса>"";

Построитель.Параметры.Вставить("""", );

Построитель.ЗаполнитьНастройки();

Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Лето);

Построитель.Выполнить();"}
}
},
{4,
{"Формы",1,0,"",""},
{0,
{"Элементы",0,0,"Эле[мент]ы","Элементы.<?>"}
},
{0,
{"Элементы формы",0,0,"Эле[мент]ы","ЭлементыФормы.<?>"}
},
{3,
{"Свойства",1,0,"",""},
{0,
{"Только просмотр (Элементы)",0,0,"Толь[коПросмот]р","Элементы.<?""Имя реквизита"">.ТолькоПросмотр = <?""Укажите значение свойства"", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">;"}
},
{0,
{"Доступность (Элементы)",0,0,"Дос[тупност]ь","Элементы.<?""Имя реквизита"">.Доступность = <?""Укажите значение свойства"", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">;"}
},
{0,
{"Видимость (Элементы)",0,0,"Вид[имост]ь","Элементы.<?""Имя реквизита"">.Видимость = <?""Укажите значение свойства"", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">;"}
}
},
{0,
{"Получить форму",0,0,"Пол[учитьФорм]у","ПолучитьФорму(<?>""<Форма>"", ""<Владелец>"", ""<Ключ уникальности>"");"}
}
},
{5,
{"Шаблоны модулей",1,0,"",""},
{2,
{"Справочники",1,0,"",""},
{0,
{"Модуль формы (Справочник)",0,0,"Мо[дуль]","////////////////////////////////////////////////////////////////////////////////
#Область ПЕРЕМЕННЫЕ_ОДУЛЯ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ЭКСПОРТНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ДЕЙСТВИЯ_КОМАНДНЫХ_ПАНЕЛЕЙ_ФОРМЫ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ОБРАБОТЧИКИ_СОБЫТИЙ_ЭЛЕМЕНТОВ_ФОРМЫ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ОБРАБОТЧИКИ_СОБЫТИЙ_ТАБЛИЧНОГО_ПОЛЯ__

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ОПЕРАТОРЫ_ОСНОВНОЙ_ПРОГРАММЫ

#КонецОбласти"}
},
{0,
{"Модуль объекта (Справочник)",0,0,"Мо[дуль]","////////////////////////////////////////////////////////////////////////////////
#Область ПЕРЕМЕННЫЕ_МОДУЛЯ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ЭКСПОРТНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ОБРАБОТЧИКИ_СОБЫТИЙ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ОПЕРАТОРЫ_ОСНОВНОЙ_ПРОГРАММЫ

#КонецОбласти"}
}
},
{2,
{"Документы",1,0,"",""},
{0,
{"Модуль формы (Справочник)",0,0,"Мо[дуль]","////////////////////////////////////////////////////////////////////////////////
#Область ПЕРЕМЕННЫЕ_МОДУЛЯ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ЭКСПОРТНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ДЛЯ_УПРАВЛЕНИЯ_ВНЕШНИМ_ВИДОМ_ФОРМЫ

	
#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_ДЕЙСТВИЯ_КОМАНДНЫХ_ПАНЕЛЕЙ_ФОРМЫ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_ОБРАБОТКИ_СВОЙСТВ_И_КАТЕГОРИЙ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ОБРАБОТЧИКИ_СОБЫТИЙ_РЕКВИЗИТОВ_ШАПКИ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ОБРАБОТЧИКИ_СОБЫТИЙ_РЕКВИЗИТОВ_ТАБЛИЧНОГО_ПОЛЯ__

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ОПЕРАТОРЫ_ОСНОВНОЙ_ПРОГРАММЫ

#КонецОбласти
"}
},
{0,
{"Модуль объекта (Справочник)",0,0,"Мо[дуль]","////////////////////////////////////////////////////////////////////////////////
#Область ПЕРЕМЕННЫЕ_МОДУЛЯ


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ЭКСПОРТНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ДЛЯ_ОБЕСПЕЧЕНИЯ_ПРОВЕДЕНИЯ_ДОКУМЕНТА

	
#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ОБРАБОТЧИКИ_СОБЫТИЙ


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ОПЕРАТОРЫ_ОСНОВНОЙ_ПРОГРАММЫ

#КонецОбласти"}
}
},
{0,
{"Общий модуль объекта",0,0,"Мо[дуль]","////////////////////////////////////////////////////////////////////////////////
#Область ПЕРЕМЕННЫЕ_МОДУЛЯ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ЭКСПОРТНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ОБРАБОТЧИКИ_СОБЫТИЙ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ОБРАБОТЧИКИ_СОБЫТИЙ_РЕКВИЗИТОВ_ШАПКИ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ОБРАБОТЧИКИ_СОБЫТИЙ_РЕКВИЗИТОВ_ТАБЛИЧНОГО_ПОЛЯ__


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ОПЕРАТОРЫ_ОСНОВНОЙ_ПРОГРАММЫ

#КонецОбласти"}
},
{0,
{"Общий модуль формы",0,0,"Мо[дуль]","////////////////////////////////////////////////////////////////////////////////
#Область ПЕРЕМЕННЫЕ_МОДУЛЯ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ЭКСПОРТНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_СОБЫТИЙ_ЭЛЕМЕНТОВ_ФОРМЫ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ОБРАБОТЧИКИ_КОМАНД_ФОРМЫ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ОПИСАНИЯ_ОПОВЕЩЕНИЙ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ДЛЯ_УПРАВЛЕНИЯ_ВНЕШНИМ_ВИДОМ_ФОРМЫ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ДЕЙСТВИЯ_КОМАНДНЫХ_ПАНЕЛЕЙ_ФОРМЫ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_ОБРАБОТКИ_СВОЙСТВ_И_КАТЕГОРИЙ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ__ОБРАБОТЧИКИ_СОБЫТИЙ_ЭЛЕМЕНТОВ_ФОРМЫ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_СОБЫТИЙ_ТАБЛИЧНОГО_ПОЛЯ__

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ОПЕРАТОРЫ_ОСНОВНОЙ_ПРОГРАММЫ

#КонецОбласти"}
},
{0,
{"Общий модуль",0,0,"Мо[дуль]","#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти

"}
}
},
{1,
{"Ускоренная разработка",1,0,"",""},
{0,
{"Динамический модуль",0,0,"","Файл = Новый Файл(""<Путь>\code.txt"");
Если Не Файл.Существует() Тогда
	Сообщить(НСтр(""ru = 'Доступ к файлу не возможен!'""), СтатусСообщения.Внимание);
	Возврат;
КонецЕсли; 

ТекстовыйФайл = Новый ТекстовыйДокумент;
ТекстовыйФайл.Прочитать(Файл.ПолноеИмя, КодировкаТекста.UTF8);
	
Попытка		
	Выполнить(ТекстовыйФайл.ПолучитьТекст()); // !!! ВЫПОЛНЯЕМ КОД ИЗ ФАЙЛА !!!
Исключение
	Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
}
},
{3,
{"Расширения",1,0,"",""},
{0,
{"&Перед(""ИмяПроцедуры"")",0,0,"?П[еред]","&Перед(""<?>"")"}
},
{0,
{"&После(""ИмяПроцедуры"")",0,0,"?П[осле]","&После(""<?>"")"}
},
{0,
{"&Вместо(""ИмяПроцедуры"")",0,0,"?В[место]","&Вместо(""<?>"")"}
}
},
{0,
{"Комментарий",0,1,"кк","// ++ Харченко Д.И. № <?""Номер задачи""> - <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> / <?>
	
// -- Харченко Д.И. № <?""Номер задачи""> - <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">"}
}
}
}
